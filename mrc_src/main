%% group 16
%% 31388 Advanced Autonomous Robots

%%%%%%%%%%%%%%%%CONSTANTS%%%%%%%%%%%%%%%%%%%%%%%
pi = 3.1415926535
% origin
xOrig = 0.25
yOrig = 0.45
% distance from the nearest node to the guidemark
nodeDist = 0.15
% robot length
length  = 0.35
% distance from the expected robot position to the guidemark
dist = 0.5-0.26
% the first guidemark number
gmno = 13
% shift value
xshift = 0
yshift = 0
thshift = 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% prior guidemark information
array "gmx" 15
array "gmy" 15
array "gmth" 15

% x coordinates
gmx[1]=0
gmx[2]=0
gmx[3]=4
gmx[4]=4
gmx[5]=0
gmx[6]=0
gmx[7]=4
gmx[8]=4
gmx[9]=0
gmx[10]=4
gmx[11]=0.4
gmx[12]=3.6
gmx[13]=2
gmx[14]=2

% y coordinates
gmy[1]=1.5
gmy[2]=1.5
gmy[3]=1.5
gmy[4]=1.5
gmy[5]=3.5
gmy[6]=3.5
gmy[7]=3.5
gmy[8]=3.5
gmy[9]=4.7
gmy[10]=4.7
gmy[11]=5
gmy[12]=5
gmy[13]=4.0
gmy[14]=4.0

% theta
gmth[1]=pi
gmth[2]=0
gmth[3]=pi
gmth[4]=0
gmth[5]=pi
gmth[6]=0
gmth[7]=pi
gmth[8]=0
gmth[9]=0
gmth[10]=pi
gmth[11]=-pi/2
gmth[12]=-pi/2
gmth[13]=pi
gmth[14]=0
%% get cost for graph planner
laser "calculatecost"

%% path for detecting the object
array "dox" 8
array "doy" 8
array "doth" 8
dox[1] = 3
doy[1] =2.5
doth[1] = -3*pi/4
dox[2] = 3.5
doy[2] =1.5
doth[2] = pi
dox[3] = 3
doy[3] = 0.5
doth[3] = 3*pi/4
dox[4] = 2
doy[4] = 0.5
doth[4] = pi/2
dox[5] = 1.01
doy[5] = 0.5
doth[5] = pi/4
dox[6] = 0.5
doy[6] = 1.5
doth[6] = 0
dox[7] = 1
doy[7] = 2.5
doth[7] = -pi/4


%% set initial odopose
set "$odox" 0
set "$odoy" 0
set "$odoth" 0

%% Kalman filter localization
laser "localize"
laser “push t='0.3' cmd='localize' “
wait 1

%% log
laser "scanset logopen"
laser "scanset log=1"
laser "odopose log=true"

%%%%%%%%MAIN PROCESS%%%%%%%%%%
%
%% first follow guidemarks
call "calibrate"
call "subtask1"
% now the robot is in guidemark 13 or 14
fwd -0.32 @v 0.1
wait 1
call "subtask2"
call "backToOrig"
goto "end"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function: calibrate
% calculate x-shift and y-shift value of the laser
label "calibrate"
xEnd = 0.5
yEnd = 1.5
thEnd = pi/2
call "plan"
wait 0.5
xCurr = $odox+xOrig
yCurr = $odoy+yOrig
thCurr = $odoth
eval xCurr
eval yCurr
eval thCurr
xshift = xEnd-xCurr
yshift = yEnd-yCurr
thShift = thEnd-thCurr
xEnd = xEnd
yEnd = yEnd
thEnd = thEnd
eval xshift
eval yshift
eval thshift
call "plan"
return


% function: subtask1
% follow guidemarks
label "subtask1"
if(gmno<1) "backToOrig"
% set a destination
% if the guidemark is on the right side of a wall
if(gmth[gmno]==0) "rightSide"
% if the guidemark is on the left side of a wall
if(gmth[gmno]==pi) "leftSide"
xEnd = gmx[gmno]
yEnd = gmy[gmno]-0.5
label "top"
thEnd = pi+gmth[gmno]
eval xEnd
eval yEnd
eval thEnd
% go to the next guidemark
call "plan"
% read the guidemark, update gmno
call "look"
wait 1
if(gmno!=98) "subtask1"
return
label "rightSide"
xEnd = gmx[gmno]+(nodeDist+length)
yEnd = gmy[gmno]
goto "top"
label "leftSide"
xEnd = gmx[gmno]-(nodeDist+length)
yEnd = gmy[gmno]
goto "top"

% function: subtask2
% recoggnize unknow objects
label "subtask2"
xEnd = 2
yEnd = 3.3
thEnd = -pi/2
call "plan"
wait 0.5
ignoreobstacles
fwd 1.1 @v 0.1 
stop
wait 1
call "update"
stringcat "zoneobst detect x="xCurr" y="yCurr" th="thCurr
laser "$string"
wait 1
turn 90
stop
wait 0.5
fwd 0.5 @v 0.1
stop
wait 0.5
gcounter = 1
label "detectLoop"
xEnd = dox[gcounter]
yEnd = doy[gcounter]
thEnd = doth[gcounter]
eval gcounter
eval xEnd
eval yEnd
eval thEnd
wait 0.5
call "plan"
gcounter=gcounter+1
wait 1
call "update"
xCurr = xCurr-xshift
yXurr = yCurr-yshift
thCurr = thCurr-thshift
stringcat "zoneobst detect x="xCurr" y="yCurr" th="thCurr
laser "$string"
if (gcounter<8) "detectLoop"
laser "zoneobst recog"
return

% function: update
% get the robot position in world coordinates
label "update"
invtrans $l0 $l1 $l2 $odox $odoy $odoth
wait 1 
xCurr = $res0
yCurr = $res1
thCurr = $res2
eval xCurr
eval yCurr
eval thCurr
return

% function: go
% drive the robot to the target pose
label "go"
call "update"
eval xTar
eval yTar
eval thTar
rotAng = atan2(yTar-yCurr,xTar-xCurr)-thCurr
rotAng = normalizeanglerad(rotAng)
wait 0.5
eval rotAng
turn rotAng "rad" @v 0.1 :($cmdtime>5)|($irdistfrontmiddle<=dist)| ($irdistfrontleft<=0.05) | ($irdistfrontright<=0.05)  
stop
wait 2
ignoreobstacles
drivew xTar yTar thTar "rad" @v 0.3 :($targetdist<0.05)|($cmdtime>10)|($irdistfrontmiddle<=dist)
stop
wait 1
call "update"
% correct orientation
rotAng = thTar-thCurr
rotAng = normalizeanglerad(rotAng)
stop
wait 0.5
turn rotAng "rad" @v 0.1 :($cmdtime>5)|($irdistfrontmiddle<=dist)| ($irdistfrontleft<=0.05) | ($irdistfrontright<=0.05)   
stop
return

% function: plan
% drive the robot to a given position in a maze, using graph planner 
label "plan"
call "update"
stringcat "findroute startx="xCurr"starty="yCurr"endx="xEnd"endy="yEnd
laser "$string"
wait 1
pno = $l4
label "loop"
pno = pno-1
stringcat "getpoint p="pno
laser "$string"
wait 0.5
xTar = $l5+xshift
yTar = $l6+yshift
thTar = $l7+thshift
if((xTar==xOrig)&(yTar==yOrig)&(pno>0)) "loop"
call "go"
wait 2
if(pno>0) "loop"
% drive the robot to head at the target
xTar = xEnd+xshift
yTar = yEnd+yshift
thTar = thEnd+thshift
call "go"
%wait 1
%fwd -0.2 @v 0.1:($irdistfrontmiddle<=dist)
return

% function: look
% return guidemarkNumber 
label "look"
counter = 0
label "scan"
switch(counter)
wait 3 : ($fiducialid>0)
gmno = $fiducialid
eval gmno
goto "hasGotcha"
case 1
turn 10
wait 3 : ($fiducialid>0)
if(gmno==$fiducialid) "next"
gmno = $fiducialid
eval gmno
"hasGotcha"
case 2
turn -20
wait 3 : ($fiducialid>0)
gmno = $fiducialid
eval gmno
label "hasGotcha"
counter = counter+1
if(counter>2) "next"
if(gmno<0) "scan"
return
label "next"
gmno = gmno+1
if(gmno>14) "overflow"
return
label "overflow"
gmno = 14
return

% function: backToOrig
% drive the robot back to the start square
label "backToOrig"
wait 1
xEnd = 2
yEnd = 0.5
thEnd = 0
call "plan"
wait 1
% to make sure it inside the square
call "update"
rotAng = -thCurr
turn  rotAng "rad" @v 0.1:($irdistfrontleft<=0.05) | ($irdistfrontright<=0.05) 
stop
wait 0.5
fwd -1.72 @v 0.1
turn -90
ignoreobstacles
fwd 0.12 @v 0.1
stop
wait 1
laser "scanset logclose"
laser "odopose log=false"
return

label "end"
stop
